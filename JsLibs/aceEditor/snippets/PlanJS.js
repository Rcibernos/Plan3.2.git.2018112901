define("ace/snippets/PlanJS",["require","exports","module"],function(c,a,b){a.snippetText='# Prototype\nsnippet proto\n	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {\n		${4:// body...}\n	};\n# Function\nsnippet fun\n	function ${1?:function_name}(${2:argument}) {\n		${3:// body...}\n	}\n# Anonymous Function\nregex /((=)\\s*|(:)\\s*|(\\()|\\b)/f/(\\))?/\nsnippet f\n	function${M1?: ${1:functionName}}($2) {\n		${0:$TM_SELECTED_TEXT}\n	}${M2?;}${M3?,}${M4?)}\n# Immediate function\ntrigger \\(?f\\(\nendTrigger \\)?\nsnippet f(\n	(function(${1}) {\n		${0:${TM_SELECTED_TEXT:/* code */}}\n	}(${1}));\n# if\nsnippet if\n	if (${1:true}) {\n		${0}\n	}\n# if ... else\nsnippet ife\n	if (${1:true}) {\n		${2}\n	} else {\n		${0}\n	}\n# tertiary conditional\nsnippet ter\n	${1:/* condition */} ? ${2:a} : ${3:b}\n# switch\nsnippet switch\n	switch (${1:expression}) {\n		case \'${3:case}\':\n			${4:// code}\n			break;\n		${5}\n		default:\n			${2:// code}\n	}\n# case\nsnippet case\n	case \'${1:case}\':\n		${2:// code}\n		break;\n	${3}\n\n# while (...) {...}\nsnippet wh\n	while (${1:/* condition */}) {\n		${0:/* code */}\n	}\n# try\nsnippet try\n	try {\n		${0:/* code */}\n	} catch (e) {}\n# do...while\nsnippet do\n	do {\n		${2:/* code */}\n	} while (${1:/* condition */});\n# Object Method\nsnippet :f\nregex /([,{[])|^\\s*/:f/\n	${1:method_name}: function(${2:attribute}) {\n		${0}\n	}${3:,}\n# setTimeout function\nsnippet setTimeout\nregex /\\b/st|timeout|setTimeo?u?t?/\n	setTimeout(function() {${3:$TM_SELECTED_TEXT}}, ${1:10});\n# Get Elements\nsnippet gett\n	getElementsBy${1:TagName}(\'${2}\')${3}\n# Get Element\nsnippet get\n	getElementBy${1:Id}(\'${2}\')${3}\n# console.log (Firebug)\nsnippet cl\n	console.log(${1});\n# return\nsnippet ret\n	return ${1:result}\n# for (property in object ) { ... }\nsnippet fori\n	for (var ${1:prop} in ${2:Things}) {\n		${0:$2[$1]}\n	}\n# hasOwnProperty\nsnippet has\n	hasOwnProperty(${1})\n# docstring\nsnippet /**\n	/**\n	 * ${1:description}\n	 *\n	 */\nsnippet @par\nregex /^\\s*\\*\\s*/@(para?m?)?/\n	@param {${1:type}} ${2:name} ${3:description}\nsnippet @ret\n	@return {${1:type}} ${2:description}\n# JSON.parse\nsnippet jsonp\n	JSON.parse(${1:jstr});\n# JSON.stringify\nsnippet jsons\n	JSON.stringify(${1:object});\n# self-defining function\nsnippet sdf\n	var ${1:function_name} = function(${2:argument}) {\n		${3:// initial code ...}\n\n		$1 = function($2) {\n			${4:// main code}\n		};\n	}\n# singleton\nsnippet sing\n	function ${1:Singleton} (${2:argument}) {\n		// the cached instance\n		var instance;\n\n		// rewrite the constructor\n		$1 = function $1($2) {\n			return instance;\n		};\n		\n		// carry over the prototype properties\n		$1.prototype = this;\n\n		// the instance\n		instance = new $1();\n\n		// reset the constructor pointer\n		instance.constructor = $1;\n\n		${3:// code ...}\n\n		return instance;\n	}\n# class\nsnippet class\nregex /^\\s*/clas{0,2}/\n	var ${1:class} = function(${20}) {\n		$40$0\n	};\n	\n	(function() {\n		${60:this.prop = ""}\n	}).call(${1:class}.prototype);\n	\n	exports.${1:class} = ${1:class};\n# \nsnippet for-\n	for (var ${1:i} = ${2:Things}.length; ${1:i}--; ) {\n		${0:${2:Things}[${1:i}];}\n	}\n# for (...) {...}\nsnippet for\n	for (var ${1:i} = 0; $1 < ${2:Things}.length; $1++) {\n		${3:$2[$1]}$0\n	}\n# for (...) {...} (Improved Native For-Loop)\nsnippet forr\n	for (var ${1:i} = ${2:Things}.length - 1; $1 >= 0; $1--) {\n		${3:$2[$1]}$0\n	}\n\n\n#modules\nsnippet def\n	define(function(require, exports, module) {\n	"use strict";\n	var ${1/.*\\///} = require("${1}");\n	\n	$TM_SELECTED_TEXT\n	});\nsnippet req\nguard ^\\s*\n	var ${1/.*\\///} = require("${1}");\n	$0\nsnippet requ\nguard ^\\s*\n	var ${1/.*\\/(.)/\\u$1/} = require("${1}").${1/.*\\/(.)/\\u$1/};\n	$0\n# Identificador del proceso o agenda\nsnippet PLAN.VAR.Id\n	\\$sys.id\n# Identificador del formulario\nsnippet PLAN.VAR.idForm\n	\\$sys.idForm\n# Id del contrato\nsnippet PLAN.USER.contract\n	\\$sys.contract\n# Id de la tabla personal (DNI)\nsnippet PLAN.USER.dni\n	\\$sys.DNI\n# Identificador del área\nsnippet PLAN.USER.idArea\n	\\$sys.idArea\n# Identificador del puesto\nsnippet PLAN.USER.idJob\n	\\$sys.idJob\n# Identificador del elemento formulario. Aplica en los eventos de los campos-Formulario y en los repositorios al seleccionar un nodo del arbol\nsnippet PLAN.VAR.idSelected\n	\\$sys.idSelected\n# Devuelve el identificador del idioma es, en... Si no hay ninguno definido se devuelve el valor por defecto. se devuelve siempre en minusculas\nsnippet PLAN.USER.language\n	\\$sys.language\n# Devuelve el identificador del pais es, en, us... Si no hay ninguno definido se devuelve el valor por defecto. se devuelve siempre en minusculas\nsnippet PLAN.USER.culture\n	\\$sys.culture\n# Identificador del registro padre del formulario actual\nsnippet PLAN.VAR.parentId\n	\\$sys.parentId\n# Para los repositorios acceder a los Id\'s de los elemenos seleccionados anteriores. Antes era [%IdPadre1%],[%IdPadre2%],..[%IdPadreN%] La forma de reemplazar esta sintaxis sería un array donde las posiciones se correpondan con los antiguos Id\'s\nsnippet PLAN.VAR.idParent[]\n	\\$sys.idParent[]\n# Identificador de la respuesta seleccionada en un avance de fase\nsnippet PLAN.VAR.forkId\n	\\$sys.forkId\n# Constante para la cadena [@pgs!notset]\nsnippet PLAN.VAR.$PGSNotSet\n	\\$PGSNotSet\n# Convierte una fecha a Número en los formatos que se utilizan en PLAN para guardar las fechas en base de datos\nsnippet PLAN.FUNCTION.formatNumDate as long\n	\\$sys.formatNumDate(${1:< Date >}, ${2:< "yyyyMMdd[HHmmss]" >})\n# Convierte una fecha a una cadena de texto en los formatos que se utilizan en PLAN para guardar las fechas en base de datos\nsnippet PLAN.FUNCTION.formatStrDate as string\n	\\$sys.formatStrDate(${1:< \\$Dt >}, ${2:< "yyyyMMdd[HHmmss]" >})\n# Convierte una cadena de texto en los formatos que se utilizan en PLAN en una fecha que podamos utilizar en javascript\nsnippet PLAN.FUNCTION.getDate(string) as \\$Dt\n	\\$sys.getDate(${1:< "[yyyyMMddHHmmss]" >})\n# Convierte un entero en los formatos que se utilizan en PLAN en una fecha que podamos utilizar en javascript\nsnippet PLAN.FUNCTION.getDate(Int) as \\$Dt\n	\\$sys.getDate(${1:< [yyyyMMddHHmmss] >})\n# Devuelve la fechaHora actual\nsnippet PLAN.FUNCTION.getCurrentDate() as \\$Dt\n	\\$sys.getCurrentDate()\n# Devuelve el valor de la opción que corresponde con la clave indicada. si el valor no existe devuelve null\nsnippet PLAN.FUNCTION.getOption("Key") as string\n	\\$sys.getOption(${1:< "Key" >})\n# Devuelve el valor de la opción que corresponde con la clave indicada. Si la clave no existe devuelve el valor indicado en altValue\nsnippet PLAN.FUNCTION.getOption("Key", "AltValue") as string\n	\\$sys.getOption(${1:< "Key" >}, ${2:< "AltValue" >})\n# Traduce una cadena de texto. Traduce tanto los textos precedidos por \'¬\' o si es un texto compuesto que contenga bloques \'[%¬ ... %]\' Traduce al idioma del usuario actual\nsnippet PLAN.FUNCTION.translate("String") as string\n	\\$sys.translate(${1:< "String" >})\n# Devuelve un objeto que representa el catálogo de idioma indicado\nsnippet PLAN.FUNCTION.language("es") as language\n	\\$sys.language(${1:< "es" >})\n# Traduce una cadena de texto al idioma\nsnippet PLAN.FUNCTION.language("es").translate("String") as string\n	\\$sys.language(${1:< "es" >}).translate(${2:< "String" >}) as string\n# Cambia \'al vuelo\' la tradución de una cadena. Si no existe, se inserta en el catálogo y en base de datos OJO!!! no todos los usuarios deberian poder hacer esto último\nsnippet PLAN.FUNCTION.language("es").set(string key, string value) as string\n	\\$sys.language(${1:< "es" >}).set(${2:< "key" >}, ${3:< "value" >})\n# Avanza un proceso\nsnippet PLAN.FUNCTION.advanceProcess\n	\\$sys.advanceProcess(${1:< Idcontrato >}, ${2:< idAgenda >}, ${3:< idBifurcacion >}, ${4:[ "Respuesta" ]}, ${5:[ ValidaCamino true|false ]}, ${6:[ ValidaFormulario true|false ]}, ${7:[ ValidaRespuesta true|false ]}, ${8:[ EjecutaLaAccion true|false ]})\n# Crea un proceso\nsnippet PLAN.FUNCTION.createProcess\n	\\$sys.createProcess(${1:< idProyecto >},${2:< current date [yyyyMMddHHmm]|\\$Dt|null >}, ${3:< "Asunto" >}, ${4:< idContratoCreador|null(contrato actual) >}, ${5:< idTipoProceso >}, ${6:< idFaseInicial >}, ${7:< visto true|false(default) >})\n# Ejecuta internamente el Script de un botón\nsnippet PLAN.FUNCTION.exeButton as infoScript\n	\\$sys.exeButton(${1:< IdBoton >}, ${2:< "idRegistroDatos" >}, ${3:[ "idPadre" ]})\n# Ejecuta URL\nsnippet PLAN.FUNCTION.exeURL as boolean\n	\\$sys.exeURL(${1:< "URL" >})\n# Ejecuta un proceso\nsnippet PLAN.FUNCTION.newShellCommand() as cCalcJsExeCommand\n	\\$sys.newShellCommand()\n# Traza\nsnippet PLAN.FUNCTION.trace\n	\\$sys.trace(${1:< obj >})\n# Importar Excel\nsnippet PLAN.FUNCTION.importExcel as infoScript\n	\\$sys.importExcel(< PendienteDefinicion >)\n# Conexiones a bases de datos adicionales\nsnippet PLAN.FUNCTION.getdb as Objeto Conexión Bd\n	\\$sys.getdb(${1:< IdConexion >})\n	';a.scope="PlanJS"});